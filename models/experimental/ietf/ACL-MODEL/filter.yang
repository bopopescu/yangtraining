container firewall {
  container family {
    container inet {
      list filter {
	key filter-name;
	ordered-by user;
	description "Define an IPv4 firewall filter";
	uses inet_filter;
      }
      list fast-update-filter {
        key filter-name;
        ordered-by user;
        description "One or more fast update filters";
        uses inet_fuf;
      } 
    }
    container inet6 {
      description "Protocol family IPv6 for firewall filter";
      list filter {
        key filter-name;
        ordered-by user;
        description "Define an IPv6 firewall filter";
        uses inet6_filter;
      }
      list fast-update-filter {
        key filter-name;
        ordered-by user;
        description "One or more fast update filters";
        uses inet6_fuf;
      }
    }

   grouping inet_filter {
     leaf filter-name {
       description "Filter name";
       type string {
         pattern "!^((__.*)|(.{65,}))$" {
           error-message "Must be a non-reserved string of 64 characters or less";
         }
       }
     }
     leaf physical-interface-filter {
       description "Filter is physical interface filter";
       type empty;
     }
     list term {
       key rule-name;
       ordered-by user;
       description "Define a firewall term";
         leaf rule-name {
           description "Term name";
           type string {
             pattern "!^((__.*)|(.{65,}))$" {
               error-message "Must be a non-reserved string of 64 characters or less";
             }
           }
         }
         container from {
           description "Define match criteria";
           choice destination-class_choice {
           list source-address {
             key address;
             ordered-by user;
             description "Match IP source address";
             uses firewall_addr_object;
           }
           list destination-address {
             key address;
             ordered-by user;
             description "Match IP destination address";
             uses firewall_addr_object;
           }
           list address {
             key address;
             ordered-by user;
             description "Match IP source or destination address";
             uses firewall_addr_object;
           }
           list source-prefix-list {
             key name;
             ordered-by user;
             description "Match IP source prefixes in named list";
             uses firewall_prefix_list;
           }
           list destination-prefix-list {
             key name;
             ordered-by user;
             description "Match IP destination prefixes in named list";
             uses firewall_prefix_list;
           }
           list prefix-list {
             key name;
             ordered-by user;
             description "Match IP source or destination prefixes in named list";
             uses firewall_prefix_list;
           }
           choice protocol_choice {
             list protocol {
               key value_keyword;
               ordered-by user;
               description "Match IP protocol type";
               uses match_protocol_value;
             }
             list protocol-except {
               key value_keyword;
               ordered-by user;
               description "Do not match IP protocol type";
               uses match_protocol_value;
             }
           }
           choice source-port_choice {
             list source-port {
               key value_keyword;
               ordered-by user;
               description "Match TCP/UDP source port";
               uses match_port_value;
             }
             list source-port-except {
               key value_keyword;
               ordered-by user;
               description "Do not match TCP/UDP source port";
               uses match_port_value;
             }
           }
           choice destination-port_choice {
             list destination-port {
               key value_keyword;
               ordered-by user;
               description "Match TCP/UDP destination port";
               uses match_port_value;
             }
             list destination-port-except {
               key value_keyword;
               ordered-by user;
               description "Do not match TCP/UDP destination port";
               uses match_port_value;
             }
           }
           choice port_choice {
             list port {
               key value_keyword;
               ordered-by user;
               description "Match TCP/UDP source or destination port";
               uses match_port_value;
             }
             list port-except {
               key value_keyword;
               ordered-by user;
               description "Do not match TCP/UDP source or destination port";
               uses match_port_value;
             }
           }
         }
         container then {
           description "Action to take if the 'from' condition is matched";
           choice policer-choice {
             leaf policer {
               description "Name of policer to use to rate-limit traffic";
               type string {
                 pattern "!^((__.*)|(.{65,}))$" {
                   error-message "Must be a non-reserved string of 64 characters or less";
                 }
               }
             }
             leaf hierarchical-policer {
               description "Name of hierarchical policer to use to rate-limit traffic";
               type string {
                 pattern "!^((__.*)|(.{65,}))$" {
                   error-message "Must be a non-reserved string of 64 characters or less";
                 }
               }
             }
           }
           leaf count {
             description "Count the packet in the named counter";
             type string {
               pattern "!^((__.*)|(.{65,}))$" {
                 error-message "Must be a non-reserved string of 64 characters or less";
               }
             }
           }
           choice designation {
             leaf accept {
               description "Accept the packet";
               type empty;
             }
             container discard {
               presence "enable discard";
               description "Discard the packet";
               leaf accounting {
                 description "Named discard collector for packet";
                 type string;
               }
             }
             leaf next {
               description "Continue to next term in a filter";
               type enumeration {
                 enum term {
                   description "Continue to next term in a filter";
                 }
               }
             }
             container routing-instance {
               description "Packets are directed to specified routing instance";
               leaf routing-instance-name {
                 description "Name of routing instance";
                 type string {
                   pattern "!^((__.*__)|(all)|(.*[ ].*)|(.{129,}))$" {
                     error-message "Must be a non-reserved string of 128 characters or less with no spaces.";
                   }
                 }
                 mandatory true;
               }
               leaf topology {
                 description "Packets are directed to specified topology";
                 type string {
                   pattern "!^((.*:.*)|(.{129,}))$" {
                     error-message "Must be a non-reserved string of 128 characters or less";
                   }
                 }
               }
             }
             leaf topology {
               description "Packets are directed to specified topology";
               type string {
                 pattern "!^((.*:.*)|(.{129,}))$" {
                   error-message "Must be a non-reserved string of 128 characters or less";
                 }
               }
             }
             leaf next-hop-group {
               description "Use specified next-hop group";
               type string;
             }
             container reject {
               presence "enable reject";
               description "Reject the packet";
               leaf style {
                 description "(null)";
                 type enumeration {
                   enum network-unreachable {
                     description "Send ICMP Network Unreachable message";
                   }
                   enum host-unreachable {
                     description "Send ICMP Host Unreachable message";
                   }
                   enum protocol-unreachable {
                     description "Send ICMP Protocol Unreachable message";
                   }
                   enum port-unreachable {
                     description "Send ICMP Port Unreachable message";
                   }
                 }
               }
             }
           }
           container next-ip {
             description "Packets are directed to specified the specified ipv4 address";
             leaf address {
               description "Address to route";
               type ipv4prefix;
             }
             container routing-instance {
               description "Packets are directed to specified routing instance";
               leaf routing-instance-name {
                 description "Name of routing instance";
                 type string {
                   pattern "!^((__.*__)|(all)|(.*[ ].*)|(.{129,}))$" {
                     error-message "Must be a non-reserved string of 128 characters or less with no spaces.";
                   }
                 }
                 mandatory true;
               }
               leaf topology {
                 description "Packets are directed to specified topology";
                 type string {
                   pattern "!^((.*:.*)|(.{129,}))$" {
                     error-message "Must be a non-reserved string of 128 characters or less";
                   }
                 }
               }
             }
           }
           container next-interface {
             presence "enable next-interface";
             description "Packets are to be routed through the specified interface";
             leaf interface-name {
               description "Interface name";
               type string {
                 length "1 .. 127";
                 pattern "^((ge-)|(xe-)|(et-)|(gr-)|(ae)|(irb))" {
                   error-message "Only ge, xe, et, ae, irb and point-to-point gr tunnel intefaces are supported";
                 }
               }
             }
             container routing-instance {
               description "Packets are directed to specified routing instance";
               leaf routing-instance-name {
                 description "Name of routing instance";
                 type string {
                   pattern "!^((__.*__)|(all)|(.*[ ].*)|(.{129,}))$" {
                     error-message "Must be a non-reserved string of 128 characters or less with no spaces.";
                   }
                 }
                 mandatory true;
               }
               leaf topology {
                 description "Packets are directed to specified topology";
                 type string {
                   pattern "!^((.*:.*)|(.{129,}))$" {
                     error-message "Must be a non-reserved string of 128 characters or less";
                   }
                 }
               }
             }
           }
           container encapsulate {
             presence "enable encapsulate";
             description "Send to a tunnel";
             leaf tunnel-end-point {
               description "Name of the tunnel end point";
               type string {
                 pattern "!^((__.*)|(.{65,}))$" {
                   error-message "Must be a non-reserved string of 64 characters or less";
                 }
               }
               mandatory true;
             }
           }
           leaf dont-fragment {
             description "Set or clear the DF bit flag of the IP header (ingress only)";
             type enumeration {
               enum clear {
                 description "Clear DF bit flag";
               }
               enum set {
                 description "Set DF bit flag";
               }
             }
           }
         }
     }
     leaf enhanced-mode {
       description "Define filter for chassis network-services enhanced mode";
       type empty;
     }
     leaf interface-shared {
       description "Filter is interface-shared";
       type empty;
     }
     leaf enhanced-mode-override {
       description "Override the default chassis network-services enhanced mode for dynamic filter";
       type empty;
     }
     }
   }
  }
}

